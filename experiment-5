#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

// Function to find the greatest common divisor (GCD) of two numbers
int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

// Function to check if 'a' is relatively prime to 'b'
int isRelativelyPrime(int a, int b) {
    return gcd(a, b) == 1;
}

// Function to encrypt using the affine Caesar cipher
void encrypt(char plaintext[], int a, int b) {
    int i;
    char encryptedChar;
    const int MOD = 26;

    printf("Encrypted text: ");

    for (i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base;
            if (isupper(plaintext[i])) {
                base = 'A';
            } else {
                base = 'a';
            }

            encryptedChar = (((a * (plaintext[i] - base)) + b) % MOD) + base;
            printf("%c", encryptedChar);
        } else {
            printf("%c", plaintext[i]);
        }
    }

    printf("\n");
}

int main() {
    char plaintext[1000];
    int a, b;

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);

    printf("Enter the value of 'a' (should be coprime to 26): ");
    scanf("%d", &a);

    printf("Enter the value of 'b': ");
    scanf("%d", &b);

    if (!isRelativelyPrime(a, 26)) {
        printf("Error: 'a' is not coprime to 26.\n");
        return 1;
    }

    encrypt(plaintext, a, b);

    return 0;
}
