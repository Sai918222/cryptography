#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// English letter frequencies (source: https://en.wikipedia.org/wiki/Letter_frequency)
const double englishFrequencies[ALPHABET_SIZE] = {0.0817, 0.0149, 0.0278, 0.0425, 0.1270, 0.0223, 0.0202, 0.0609, 0.0697, 0.0015, 0.0077, 0.0403, 0.0241, 0.0675, 0.0751, 0.0193, 0.0009, 0.0599, 0.0633, 0.0906, 0.0276, 0.0098, 0.0236, 0.0015, 0.0197, 0.0007};

// Function to calculate the letter frequencies in a given text
void calculateLetterFrequencies(char *text, double frequencies[]) {
    int totalLetters = 0;
    int i;

    // Initialize frequencies array
    for (i = 0; i < ALPHABET_SIZE; i++) {
        frequencies[i] = 0.0;
    }

    // Count the occurrences of each letter
    for (i = 0; text[i] != '\0'; i++) {
        char c = text[i];
        if (isalpha(c)) {
            frequencies[tolower(c) - 'a']++;
            totalLetters++;
        }
    }

    // Normalize frequencies to percentages
    for (i = 0; i < ALPHABET_SIZE; i++) {
        frequencies[i] /= totalLetters;
    }
}

// Function to decrypt the ciphertext using a given mapping of letters
void decrypt(char *ciphertext, char *mapping) {
    int length = strlen(ciphertext);
    char plaintext[length + 1];

    // Perform decryption
    for (int i = 0; i < length; i++) {
        char c = ciphertext[i];
        if (isalpha(c)) {
            if (isupper(c)) {
                plaintext[i] = toupper(mapping[c - 'A']);
            } else {
                plaintext[i] = tolower(mapping[c - 'a']);
            }
        } else {
            plaintext[i] = c;
        }
    }
    plaintext[length] = '\0';

    printf("Plaintext: %s\n", plaintext);
}

// Function to rank the possible plaintexts based on letter frequency
void rankPlaintexts(char *ciphertext, char *mapping, int topN) {
    double frequencies[ALPHABET_SIZE];
    calculateLetterFrequencies(ciphertext, frequencies);
    double scores[ALPHABET_SIZE] = {0.0};
    int i, j;

    // Calculate the similarity score between the decrypted text frequencies and English letter frequencies
    for (i = 0; i < ALPHABET_SIZE; i++) {
        for (j = 0; j < ALPHABET_SIZE; j++) {
            int index = (j + i) % ALPHABET_SIZE;
            scores[i] += (englishFrequencies[j] - frequencies[index]) * (englishFrequencies[j] - frequencies[index]);
        }
    }

    // Sort the scores and print the top N possible plaintexts
    for (i = 0; i < topN; i++) {
        int minIndex = 0;
        double minScore = scores[0];
        for (j = 1; j < ALPHABET_SIZE; j++) {
            if (scores[j] < minScore) {
                minIndex = j;
                minScore = scores[j];
            }
        }
        printf("Top %d: ", i + 1);
        decrypt(ciphertext, mapping + minIndex);
        scores[minIndex] = 1e9; // Set to a large value to prevent reselection of the same index
    }
}

int main() {
    char ciphertext[] = "Gur Chefhvg bs GUR havk";
    char mapping[ALPHABET_SIZE] = "abcdefghijklmnopqrstuvwxyz";
    int topN = 10;

    printf("Performing letter frequency attack on the ciphertext:\n%s\n", ciphertext);
    printf("Finding top %d possible plaintexts:\n", topN);
    rankPlaintexts(ciphertext, mapping, topN);

    return 0;
}
